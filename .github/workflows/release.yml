# Copyright (c) 2025 Tobias Weber <weber.tobias.md@gmail.com>
# 
# This file is part of the BCSV library.
# 
# Licensed under the MIT License. See LICENSE file in the project root 
# for full license information.

name: Release and Version Update

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.4, v2.1.0, etc.

permissions:
  contents: write  # Allow the workflow to commit changes

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history for proper git operations
    
    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}
        
        # Validate version format (X.Y.Z)
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid version format '$VERSION'. Expected format: X.Y.Z"
          exit 1
        fi
        
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT
        
        echo "Extracted version: $VERSION (Major: $MAJOR, Minor: $MINOR, Patch: $PATCH)"
    
    - name: Update version_generated.h
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        MAJOR="${{ steps.version.outputs.major }}"
        MINOR="${{ steps.version.outputs.minor }}"
        PATCH="${{ steps.version.outputs.patch }}"
        
        # Create the new version header
        cat > include/bcsv/version_generated.h << EOF
        // Auto-generated version header - DO NOT EDIT MANUALLY
        // This file is generated by GitHub Actions from Git tags

        #ifndef BCSV_VERSION_GENERATED_H
        #define BCSV_VERSION_GENERATED_H

        namespace bcsv {
        namespace version {

        constexpr int MAJOR = $MAJOR;
        constexpr int MINOR = $MINOR;
        constexpr int PATCH = $PATCH;
        constexpr const char* STRING = "$VERSION";

        } // namespace version
        } // namespace bcsv

        #endif // BCSV_VERSION_GENERATED_H
        EOF
        
        echo "Updated version_generated.h to version $VERSION"
    
    - name: Validate updated version
      run: |
        # Verify the header file was updated correctly
        if grep -q "constexpr int MAJOR = ${{ steps.version.outputs.major }};" include/bcsv/version_generated.h; then
          echo "✓ Version header updated successfully"
        else
          echo "✗ Failed to update version header"
          exit 1
        fi
    
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet include/bcsv/version_generated.h; then
          echo "No changes to commit (version already up to date)"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Version header has changes"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit updated version
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add include/bcsv/version_generated.h
        git commit -m "Auto-update version to ${{ steps.version.outputs.version }} for release ${{ steps.version.outputs.tag_name }}"
        
        # Push the commit back to the repository
        git push origin HEAD:master
        
        echo "✓ Committed version update to repository"
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: Release ${{ steps.version.outputs.tag_name }}
        body: |
          ## BCSV Release ${{ steps.version.outputs.version }}
          
          This release automatically updates the embedded version to match the git tag.
          
          ### Changes in this release:
          - Version updated to ${{ steps.version.outputs.version }}
          - Auto-generated version header synchronized with git tag
          
          ### For developers:
          This release ensures that downloading the header files directly from GitHub 
          will include the correct version information without requiring CMake or Git.
          
          ### Usage:
          Simply download the `include/` directory and use BCSV as a header-only library.
          The version information is embedded and accessible via:
          ```cpp
          #include "bcsv/definitions.h"
          std::cout << "BCSV Version: " << bcsv::getVersion() << std::endl;
          ```
        draft: false
        prerelease: false
    
    - name: Summary
      run: |
        echo "🎉 Release workflow completed successfully!"
        echo "📦 Release ${{ steps.version.outputs.tag_name }} created"
        echo "📝 Version header updated to ${{ steps.version.outputs.version }}"
        echo "✅ Repository ready for header-only distribution"