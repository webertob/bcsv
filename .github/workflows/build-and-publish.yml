name: Build and publish wheels (manylinux & Windows)

on:
  push:
    branches: [ main, master, release ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  PYPROJECT_DIR: .
  CIBW_SKIP: "pp*"

jobs:
  build-linux:
    name: Build Linux (manylinux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Upgrade setuptools
        run: python -m pip install --upgrade pip setuptools wheel cibuildwheel==3.2.0

      - name: Build manylinux wheels with cibuildwheel (local)
        run: |
          python -m cibuildwheel python --output-dir dist

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels-linux
          path: dist/*.whl

  build-windows:
    name: Build Windows wheels
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Upgrade setuptools
        run: python -m pip install --upgrade pip setuptools wheel cibuildwheel==3.2.0

      - name: Build windows wheels with cibuildwheel (local)
        run: |
          python -m cibuildwheel python --output-dir dist

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels-windows
          path: dist/*.whl

  publish:
    name: Publish to TestPyPI (and PyPI when token present)
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')
    steps:
      - uses: actions/checkout@v4

      - name: Download built wheels (Linux)
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-linux
          path: wheel-artifacts/linux

      - name: Download built wheels (Windows)
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-windows
          path: wheel-artifacts/windows

      - name: Prepare wheels for upload
        run: |
          mkdir -p wheel-artifacts/all
          cp wheel-artifacts/linux/*.whl wheel-artifacts/all/ || true
          cp wheel-artifacts/windows/*.whl wheel-artifacts/all/ || true

      - name: Install twine
        run: python -m pip install --upgrade pip twine

      - name: Verify wheels
        run: ls -l wheel-artifacts/all

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: python -m twine upload --repository-url https://test.pypi.org/legacy/ wheel-artifacts/all/*.whl

      - name: Publish to PyPI (if token set)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "${TWINE_PASSWORD}" ]; then
            python -m twine upload wheel-artifacts/all/*.whl
          else
            echo "PYPI_API_TOKEN not set; skipping upload to PyPI"
          fi

  smoke-test:
    name: Smoke test installed wheel
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Download published wheels (Linux)
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-linux
          path: wheel-artifacts/linux
        continue-on-error: true

      - name: Download published wheels (Windows)
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-windows
          path: wheel-artifacts/windows
        continue-on-error: true

      - name: Prepare wheels for test
        run: |
          mkdir -p wheel-artifacts/all
          cp wheel-artifacts/linux/*.whl wheel-artifacts/all/ || true
          cp wheel-artifacts/windows/*.whl wheel-artifacts/all/ || true

      - name: Smoke test wheel in clean venv
        run: |
          python -m venv /tmp/venv
          source /tmp/venv/bin/activate
          python -m pip install --upgrade pip
          pip install wheel-artifacts/all/*.whl
          python -c "import pybcsv; print('pybcsv ok', pybcsv.__version__)"
