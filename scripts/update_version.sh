#!/bin/bash
# Copyright (c) 2025 Tobias Weber <weber.tobias.md@gmail.com>
# 
# This file is part of the BCSV library.
# 
# Licensed under the MIT License. See LICENSE file in the project root 
# for full license information.

# update_version.sh - Update embedded version to match git tag or specified version

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() { echo -e "${RED}✗ $1${NC}"; }
print_success() { echo -e "${GREEN}✓ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠ $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ $1${NC}"; }

# Function to show usage
show_usage() {
    echo "Usage: $0 [VERSION]"
    echo ""
    echo "Update the embedded version in version_generated.h"
    echo ""
    echo "Arguments:"
    echo "  VERSION    Specific version to set (e.g., 1.0.4)"
    echo "             If not provided, uses the latest git tag"
    echo ""
    echo "Examples:"
    echo "  $0              # Use latest git tag"
    echo "  $0 1.0.4        # Set specific version"
    echo ""
}

# Function to validate version format
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        print_error "Invalid version format: $version"
        print_info "Expected format: X.Y.Z (e.g., 1.0.4)"
        return 1
    fi
    return 0
}

# Function to update version header
update_version_header() {
    local version=$1
    local major minor patch
    
    # Split version into components
    IFS='.' read -r major minor patch <<< "$version"
    
    local version_file="include/bcsv/version_generated.h"
    
    # Create backup
    cp "$version_file" "$version_file.bak"
    
    # Generate new version header
    cat > "$version_file" << EOF
// Auto-generated version header - DO NOT EDIT MANUALLY
// This file is generated by CMake from Git tags

#ifndef BCSV_VERSION_GENERATED_H
#define BCSV_VERSION_GENERATED_H

namespace bcsv {
namespace version {

constexpr int MAJOR = $major;
constexpr int MINOR = $minor;
constexpr int PATCH = $patch;
constexpr const char* STRING = "$version";

} // namespace version
} // namespace bcsv

#endif // BCSV_VERSION_GENERATED_H
EOF
    
    print_success "Updated version header to $version"
    print_info "Major: $major, Minor: $minor, Patch: $patch"
    
    # Remove backup if successful
    rm "$version_file.bak"
}

# Main script
main() {
    # Check if we're in the right directory
    if [ ! -f "include/bcsv/version_generated.h" ]; then
        print_error "version_generated.h not found. Run this script from the BCSV root directory."
        exit 1
    fi
    
    local target_version=""
    
    # Parse command line arguments
    if [ $# -eq 0 ]; then
        # No arguments - try to get version from git tag
        if ! git rev-parse --git-dir > /dev/null 2>&1; then
            print_error "Not in a git repository and no version specified"
            show_usage
            exit 1
        fi
        
        local git_tag
        git_tag=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$git_tag" ]; then
            print_error "No git tags found and no version specified"
            show_usage
            exit 1
        fi
        
        # Remove 'v' prefix from git tag
        target_version=${git_tag#v}
        print_info "Using version from git tag: $git_tag -> $target_version"
        
    elif [ $# -eq 1 ]; then
        if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
            show_usage
            exit 0
        fi
        target_version=$1
        print_info "Using specified version: $target_version"
    else
        print_error "Too many arguments"
        show_usage
        exit 1
    fi
    
    # Validate version format
    if ! validate_version "$target_version"; then
        exit 1
    fi
    
    # Update the version header
    update_version_header "$target_version"
    
    print_success "Version update completed!"
    print_info "Don't forget to commit the changes if needed."
}

# Run main function with all arguments
main "$@"